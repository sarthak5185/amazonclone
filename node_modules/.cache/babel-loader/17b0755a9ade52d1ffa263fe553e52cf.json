{"ast":null,"code":"export const initialState = {\n  basket: [],\n  user: null\n};\nexport const getBasketTotal = basket => basket === null || basket === void 0 ? void 0 : basket.reduce((amount, item) => item.price + amount, 0);\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'SET_USER':\n      return { ...state,\n        user: action.user\n      };\n\n    case 'ADD_TO_BASKET':\n      // logic for adding item to basket\n      return { // return the existing state and updated values\n        ...state,\n        basket: [...state.basket, action.item]\n      };\n\n    case 'REMOVE_FROM_BASKET':\n      // logic for removing item from basket\n      let newBasket = [...state.basket];\n      const index = state.basket.findIndex(basketItem => basketItem.id === action.id); // item exists in basket\n\n      if (index >= 0) {\n        newBasket.splice(index, 1);\n      } else {\n        console.warn(`Can't remove product (id: ${action.id}) as its not found`);\n      }\n\n      return { ...state,\n        basket: newBasket\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/sarthakjain/Downloads/amazon-clone-original_version/src/reducer.js"],"names":["initialState","basket","user","getBasketTotal","reduce","amount","item","price","reducer","state","action","type","newBasket","index","findIndex","basketItem","id","splice","console","warn"],"mappings":"AAAA,OAAO,MAAMA,YAAY,GAAG;AACxBC,EAAAA,MAAM,EAAE,EADgB;AAExBC,EAAAA,IAAI,EAAE;AAFkB,CAArB;AAKP,OAAO,MAAMC,cAAc,GAAIF,MAAD,IAC1BA,MAD0B,aAC1BA,MAD0B,uBAC1BA,MAAM,CAAEG,MAAR,CAAe,CAACC,MAAD,EAASC,IAAT,KAAkBA,IAAI,CAACC,KAAL,GAAaF,MAA9C,EAAsD,CAAtD,CADG;;AAGP,MAAMG,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC/B,UAAOA,MAAM,CAACC,IAAd;AACI,SAAK,UAAL;AACI,aAAO,EACH,GAAGF,KADA;AAEHP,QAAAA,IAAI,EAAEQ,MAAM,CAACR;AAFV,OAAP;;AAIJ,SAAK,eAAL;AACI;AACA,aAAO,EACH;AACA,WAAGO,KAFA;AAGHR,QAAAA,MAAM,EAAE,CAAC,GAAGQ,KAAK,CAACR,MAAV,EAAkBS,MAAM,CAACJ,IAAzB;AAHL,OAAP;;AAKJ,SAAK,oBAAL;AACI;AACA,UAAIM,SAAS,GAAG,CAAC,GAAGH,KAAK,CAACR,MAAV,CAAhB;AACA,YAAMY,KAAK,GAAGJ,KAAK,CAACR,MAAN,CAAaa,SAAb,CACTC,UAAD,IACAA,UAAU,CAACC,EAAX,KAAkBN,MAAM,CAACM,EAFf,CAAd,CAHJ,CAOI;;AACA,UAAIH,KAAK,IAAI,CAAb,EAAgB;AACZD,QAAAA,SAAS,CAACK,MAAV,CAAiBJ,KAAjB,EAAwB,CAAxB;AACH,OAFD,MAEO;AACHK,QAAAA,OAAO,CAACC,IAAR,CACK,6BAA4BT,MAAM,CAACM,EAAG,oBAD3C;AAGH;;AACD,aAAO,EAAE,GAAGP,KAAL;AAAYR,QAAAA,MAAM,EAAEW;AAApB,OAAP;;AACJ;AACI,aAAOH,KAAP;AA9BR;AAgCH,CAjCD;;AAmCA,eAAeD,OAAf","sourcesContent":["export const initialState = {\n    basket: [],\n    user: null,\n};\n\nexport const getBasketTotal = (basket) => \n    basket?.reduce((amount, item) => item.price + amount, 0);\n\nconst reducer = (state, action) => {\n    switch(action.type) {\n        case 'SET_USER':\n            return {\n                ...state,\n                user: action.user,\n            }\n        case 'ADD_TO_BASKET':\n            // logic for adding item to basket\n            return {\n                // return the existing state and updated values\n                ...state,\n                basket: [...state.basket, action.item],\n            };\n        case 'REMOVE_FROM_BASKET':\n            // logic for removing item from basket\n            let newBasket = [...state.basket];\n            const index = state.basket.findIndex(\n                (basketItem) => \n                basketItem.id === action.id\n            );\n            // item exists in basket\n            if (index >= 0) {\n                newBasket.splice(index, 1);\n            } else {\n                console.warn(\n                    `Can't remove product (id: ${action.id}) as its not found`\n                );\n            }\n            return { ...state, basket: newBasket };    \n        default:\n            return state;\n    }\n}\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}